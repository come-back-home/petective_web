"""empty message

Revision ID: 7e6cf1e1e677
Revises: 8bc6bf7b57dd
Create Date: 2019-08-07 11:32:39.921729

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7e6cf1e1e677'
down_revision = '8bc6bf7b57dd'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(length=1000), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('location',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=500), nullable=True),
    sa.Column('address', sa.String(length=1000), nullable=True),
    sa.Column('shelter', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mypet',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=300), nullable=True),
    sa.Column('sex', sa.String(length=10), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sequential_images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(length=1000), nullable=True),
    sa.Column('trained', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('status')
    op.drop_table('response_dicom')
    op.drop_table('request_dicom')
    op.drop_index('ix_caller_name', table_name='caller')
    op.drop_table('caller')
    op.drop_table('waiting_list')
    op.add_column('users', sa.Column('location_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('phone', sa.String(length=100), nullable=True))
    op.create_foreign_key(None, 'users', 'location', ['location_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_column('users', 'phone')
    op.drop_column('users', 'location_id')
    op.create_table('waiting_list',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('study_uid', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['request_id'], ['request_dicom.id'], name='waiting_list_request_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='waiting_list_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='waiting_list_pkey')
    )
    op.create_table('caller',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('response_ip', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('response_port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_aet', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='caller_pkey')
    )
    op.create_index('ix_caller_name', 'caller', ['name'], unique=True)
    op.create_table('request_dicom',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('request_dicom_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('origin_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('result_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('study_uid', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('instance_uid', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('system_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('system_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('system_provider', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ae_title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], name='request_dicom_status_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='request_dicom_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='request_dicom_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('response_dicom',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('path', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('request_dicom_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['request_dicom_id'], ['request_dicom.id'], name='response_dicom_request_dicom_id_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], name='response_dicom_status_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='response_dicom_pkey')
    )
    op.create_table('status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='status_pkey')
    )
    op.drop_table('sequential_images')
    op.drop_table('mypet')
    op.drop_table('location')
    op.drop_table('images')
    # ### end Alembic commands ###
